version: "3.9"
services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 20

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"  # mgmt UI http://localhost:15672
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 5s
      retries: 20

  jaeger:
    environment:
      COLLECTOR_OTLP_ENABLED: "true"   # enable OTLP receiver in Jaeger (needed on older versions too)
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"   # UI http://localhost:16686
      - "14250:14250"   # collector gRPC (from OTel Collector)
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:16686"]
      interval: 5s
      timeout: 5s
      retries: 20

  collector:
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./otel/collector-config.yaml:/etc/otelcol/config.yaml:ro
    depends_on:
      - jaeger
    ports:
      - "4318:4318"   # OTLP HTTP receiver
      - "4317:4317"   # (also enabled, not used here)

  api:
    build: ./api
    environment:
      RABBIT_URL: amqp://${RABBIT_USER}:${RABBIT_PASSWORD}@rabbitmq:5672/
      EXCHANGE: images
      ROUTING_KEY: process_image
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      collector:
        condition: service_started
    ports:
      - "8000:8000"

  worker:
    build: ./worker
    environment:
      RABBIT_URL: amqp://${RABBIT_USER}:${RABBIT_PASSWORD}@rabbitmq:5672/
      EXCHANGE: images
      QUEUE: images.q
      DLX: images.dlx
      DLQ: images.dlx.q
      ROUTING_KEY: process_image
      DATA_DIR: /data
      CONCURRENCY: "8"
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT}
    depends_on:
      rabbitmq:
        condition: service_healthy
      collector:
        condition: service_started
    volumes:
      - data:/data

volumes:
  pgdata:
  data:
